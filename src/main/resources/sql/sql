BEGIN;


CREATE TABLE IF NOT EXISTS public.basket
(
    basket_id serial NOT NULL,
    user_id integer NOT NULL,
    bottom_id integer NOT NULL,
    topping_id integer NOT NULL,
    quantity integer NOT NULL,
    orderlineprice integer NOT NULL,
    CONSTRAINT basket_pkey PRIMARY KEY (basket_id),
    CONSTRAINT "UserConstrain" UNIQUE (user_id)
    );

CREATE TABLE IF NOT EXISTS public.bottom
(
    bottom_id serial NOT NULL,
    bottom character varying(60) COLLATE pg_catalog."default" NOT NULL,
    price integer NOT NULL,
    CONSTRAINT bottom_pkey PRIMARY KEY (bottom_id)
    );

CREATE TABLE IF NOT EXISTS public.orderline
(
    orderline_id serial NOT NULL,
    order_id integer NOT NULL,
    topping_id integer NOT NULL,
    bottom_id integer NOT NULL,
    quantity integer NOT NULL,
    price integer NOT NULL,
    CONSTRAINT orderline_pkey PRIMARY KEY (orderline_id)
    );

CREATE TABLE IF NOT EXISTS public.orders
(
    order_id serial NOT NULL,
    user_id integer NOT NULL,
    CONSTRAINT orders_pkey PRIMARY KEY (order_id)
    );

CREATE TABLE IF NOT EXISTS public.topping
(
    topping_id serial NOT NULL,
    topping character varying(60) COLLATE pg_catalog."default" NOT NULL,
    price integer NOT NULL,
    CONSTRAINT topping_pkey PRIMARY KEY (topping_id)
    );

CREATE TABLE IF NOT EXISTS public.users
(
    user_id serial NOT NULL,
    email character varying(75) COLLATE pg_catalog."default" NOT NULL,
    password character varying(75) COLLATE pg_catalog."default" NOT NULL,
    is_admin boolean NOT NULL DEFAULT false,
    name character varying(100) COLLATE pg_catalog."default" NOT NULL,
    balance integer NOT NULL DEFAULT 0,
    mobile character varying(16) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT users_pkey PRIMARY KEY (user_id),
    CONSTRAINT users_email_key UNIQUE (email)
    );

ALTER TABLE IF EXISTS public.basket
    ADD CONSTRAINT fk_bottomid FOREIGN KEY (bottom_id)
    REFERENCES public.bottom (bottom_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.basket
    ADD CONSTRAINT fk_toppingid FOREIGN KEY (topping_id)
    REFERENCES public.topping (topping_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.basket
    ADD CONSTRAINT fk_userid FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.bottom
    ADD CONSTRAINT fk_bottomid FOREIGN KEY (bottom_id)
    REFERENCES public.orderline (bottom_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.orderline
    ADD FOREIGN KEY (order_id)
    REFERENCES public.orders (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.orderline
    ADD FOREIGN KEY (topping_id)
    REFERENCES public.topping (topping_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.orderline
    ADD FOREIGN KEY (bottom_id)
    REFERENCES public.bottom (bottom_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT fk_userid FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.orders
    ADD CONSTRAINT fk_orderid FOREIGN KEY (order_id)
    REFERENCES public.orderline (order_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.orders
    ADD FOREIGN KEY (user_id)
    REFERENCES public.users (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.topping
    ADD CONSTRAINT fk_toppingid FOREIGN KEY (topping_id)
    REFERENCES public.orderline (topping_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.users
    ADD FOREIGN KEY (user_id)
    REFERENCES public.basket (user_id) MATCH SIMPLE
    ON UPDATE NO ACTION
       ON DELETE NO ACTION
    NOT VALID;

END;